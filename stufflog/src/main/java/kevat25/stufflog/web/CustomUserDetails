package kevat25.stufflog.web;

import kevat25.stufflog.model.UserAccount;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.Collections;

public class CustomUserDetails implements UserDetails {

    private final UserAccount userAccount;

    public CustomUserDetails(UserAccount userAccount) {
        this.userAccount = userAccount;
    }

    public Long getUserId() {
        return userAccount.getUserId();
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // Return a singleton list with a single SimpleGrantedAuthority based on the user's role
        return Collections.singletonList(new SimpleGrantedAuthority(userAccount.getRole()));
    }Arvosana 3
    Ed sekä: Harjoitustyössä on login ominaisuus, jossa on käytetty spring securityä. Tavallinen käyttäjä pelkästään näkee tiedot: hän ei voi poistaa, lisätä tai muokata tietoja. Admin tasoisella käyttäjällä kaikki oikeudet. 

    @Override
    public String getPassword() {
        return userAccount.getPasswordHash();
    }

    @Override
    public String getUsername() {
        return userAccount.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}